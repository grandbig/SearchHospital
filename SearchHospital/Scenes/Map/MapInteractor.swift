//
//  MapInteractor.swift
//  SearchHospital
//
//  Created by Takahiro Kato on 2018/04/12.
//  Copyright © 2018年 Takahiro Kato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromiseKit

protocol MapBusinessLogic {
    func initialize(request: Map.Initialize.Request)
    func search(request: Map.Search.Request)
}

protocol MapDataStore {
    //var name: String { get set }
}

class MapInteractor: MapBusinessLogic, MapDataStore {
    var presenter: MapPresentationLogic?
    var worker = HospitalWorker(dataStore: HospitalAPI())
    var isInitialized = false
    
    // MARK: Initialize
    func initialize(request: Map.Initialize.Request) {
        var isShowUserPosition = false
        isShowUserPosition = isInitialized ? true : isShowUserPosition
        isInitialized = isInitialized ? isInitialized : true

        let response = Map.Initialize.Response(latitude: request.latitude,
                                               longitude: request.longitude,
                                               isShowUserPosition: isShowUserPosition)
        presenter?.presentInitialize(response: response)
    }

    // MARK: Search Hospitals
    func search(request: Map.Search.Request) {
        guard let latitude = request.latitude, let longitude = request.longitude else {
            // TODO: 最終的に「現在地が取得できない」系のアラートを表示したい
            return
        }
        firstly {
            worker.fetchHospitals(lat: latitude, lng: longitude)
        }.done { [weak self] results in
            guard let strongSelf = self else { return }
            let response = Map.Search.Response(type: .success(places: results))
            strongSelf.presenter?.presentSearch(response: response)
        }.catch { [weak self] error in
            guard let strongSelf = self else { return }
            let response = Map.Search.Response(type: .failure(description: error.localizedDescription))
            strongSelf.presenter?.presentSearch(response: response)
        }
    }
}
