//
//  MapPresenter.swift
//  SearchHospital
//
//  Created by Takahiro Kato on 2018/04/12.
//  Copyright (c) 2018年 Takahiro Kato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// マップ初期化の状態
enum MapInitializeState {
    case unInitialized(latitude: Double, longitude: Double, zoomLevel: Float)
    case initialized
}

/// 検索結果の状態
enum MapSearchState {
    case success(places: [Map.Search.ViewModel.Place])
    case failure(description: String)
}

/// 写真取得結果の状態
enum MapFetchPhotoState {
    case success(image: UIImage?)
    case failure(description: String)
}

protocol MapPresentationLogic {
    func presentInitialize(response: Map.Initialize.Response)
    func presentSearch(response: Map.Search.Response)
    func presentPhoto(response: Map.FetchPhoto.Response)
}

class MapPresenter: MapPresentationLogic {

    weak var viewController: MapDisplayLogic?
    private let zoomLevel: Float = 15.5
    
    // MARK: Initialize
    func presentInitialize(response: Map.Initialize.Response) {
        var viewModel: Map.Initialize.ViewModel!

        if response.isShowUserPosition {
            viewModel = Map.Initialize.ViewModel(state: .initialized)
        } else {
            let state = MapInitializeState.unInitialized(latitude: response.latitude,
                                                         longitude: response.longitude,
                                                         zoomLevel: zoomLevel)
            viewModel = Map.Initialize.ViewModel(state: state)
        }
        viewController?.displayInitialize(viewModel: viewModel)
    }
    
    // MARK: 検索
    func presentSearch(response: Map.Search.Response) {
        var viewModel: Map.Search.ViewModel!
        
        switch response.type {
        case let .success(places):
            let state = MapSearchState.success(places: convertToViewPlaceModel(places: places))
            viewModel = Map.Search.ViewModel(state: state)
        case let .failure(description):
            viewModel = Map.Search.ViewModel(state: .failure(description: description))
        }
        viewController?.displaySearched(viewModel: viewModel)
    }

    // MARK: 病院の写真を取得
    func presentPhoto(response: Map.FetchPhoto.Response) {
        var viewModel: Map.FetchPhoto.ViewModel!
        
        switch response.type {
        case let .success(image):
            viewModel = Map.FetchPhoto.ViewModel(state: .success(image: image))
        case let .failure(description):
            viewModel = Map.FetchPhoto.ViewModel(state: .failure(description: description))
        }
        viewController?.displayFetchedPhoto(viewModel: viewModel)
    }
}

extension MapPresenter {
    
    /// 描画用のMap.Search.ViewModel.Placeに変換する処理
    ///
    /// - Parameter places: 病院情報の配列
    /// - Returns: 描画用の病院情報配列
    private func convertToViewPlaceModel(places: [Place]) -> [Map.Search.ViewModel.Place] {
        typealias ViewPlaceModel = Map.Search.ViewModel.Place
        
        let results = places.map {
            ViewPlaceModel(placeId: $0.placeId,
                           name: $0.name,
                           iconUrl: $0.icon,
                           latitude: $0.geometry.location.lat,
                           longitude: $0.geometry.location.lng,
                           rating: $0.rating,
                           priceLevel: $0.priceLevel,
                           openNow: $0.openingHours?.openNow != nil)
        }
        
        return results
    }
}
